////////////////////////////////////////////////////////////////////////DUT///////////////////////////////////////////////////////////////////////////////////////////////

module half_adder(a,b,s,c);
  input a,b;  // by default wire
  output reg s,c;
  
  always@(a or b)
  begin
    if (a==0 && b==0)  // we can also write - if({a,b}==0)
      begin 
        s=1'b0;
        c=1'b0;
      end
    else if ((a==1 && b==0) || (a==0 && b==1))
      begin 
        s=1'b1;
        c=1'b0;
      end
    else 
      begin 
        s=1'b0;
        c=1'b1;
      end
    
    end 
endmodule


// reg cannot be driven by continuous assignment ( i.e. we cannot use reg in line 5 and assign s=a^b together) for continuous assignment, declare output as wire
// always@(a or b)
//    begin 
//      case(a|b)
//        2'b00: begin s=0; c=0; end
//        2'b01: begin s=1; c=0; end
//        2'b10: begin s=1; c=0; end
//        2'b11: begin s=1; c=1; end
//      endcase 
//    end


/////////////////////////////////////////////////////////////////test bench///////////////////////////////////////////////////////////////////////////////////////////////


module half_adder_tb;

reg a,b;
wire s,c;

half_adder half_adder_tb(a,b,s,c);

initial
begin 
  {a,b}=0;
  {a,b}=1;
  {a,b}=2;
  {a,b}=3;
end 

initial
begin
  $dumpfile("half_adder.vcd");
  $dumpvars(0,a,b,s,c);
end

endmodule





















    
    
    
