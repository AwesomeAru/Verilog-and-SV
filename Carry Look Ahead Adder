////////////////////////////////////////////////////////////DUT////////////////////////////////////////////////////////////////////////////////////////

module carry_look_ahead(a,b,c_in,s);
  input [3:0]a;
  input [3:0]b;
  input c_in;
  output [4:0]s;
  inout g0, g1, g2, g3, p0, p1, p2, p3;
  
  and(g0, a[0],b[0]);
  and(g1, a[1],b[1]);
  and(g2, a[2],b[2]);
  and(g3, a[3],b[3]);
  
  xor(p0, a[0],b[0]);
  xor(p1, a[1],b[1]);
  xor(p2, a[2],b[2]);
  xor(p3, a[3],b[3]);
  
  //generating all input carries from combi logic
  
  assign c1 = g0|(p0&c_in);
  assign c2 = g1|(p0&c_in&p1)|(p1&g0);
  assign c3 = g2|(p0&c_in&p1&p2)|(p1&g0&p2)|(p2&g1);
  assign c4 = g3|(p0&c_in&p1&p2&p3)|(p1&g0&p2&p3)|(p2&g1&p3)|(p3&g2);
  
  //instantiating full adder modules and giving required input variables
  
  full_adder f1(a[0], b[0], c_in, s[0],p);
  full_adder f2( a[1], b[1], c1, s[1],q);
  full_adder f3( a[2], b[2], c2, s[2],r);
  full_adder f4( a[3], b[3], c3, s[3], s[4]);
  
endmodule

module full_adder(p,q,r,s,c);
    input p,q,r;
    output s,c;
    
    assign s=p^q^r;
    assign c=(p&q) | (q&r) | (p&r);
    
  endmodule
  
  //////////////////////////////////////////////////////////////////Test Bench///////////////////////////////////////////////////////////////////////////////////
  
  module carry__look_ahead_tb;
  reg [3:0]a;
  reg [3:0]b;
  reg c_in;
  wire [4:0]s;
  
  carry_look_ahead carry_look_ahead_tb(a[3:0],b[3:0],c_in,s[4:0]);
  
  initial
    begin
      b=4'b0000;
      c_in=1'b0;
      {a}=0;
      #2 a=4'b0001;
      #2 a=4'b0010;
      #2 a=4'b0011;
      #2 a=4'b0100;
      #2 a=4'b0101;
      #2 a=4'b0110;
      #2 a=4'b0111;
      
      #2 b=4'b1000;
      #2 b=4'b1001;
      #2 b=4'b1010;
      #2 b=4'b1011;
      #2 b=4'b1100;
      #2 b=4'b1101;
      #2 b=4'b1110;
      #2 b=4'b1111;
      
    end 
  
  initial 
    begin
      $dumpfile("carry_look_ahead_adder.vcd");
      $dumpvars(0,a[3:0],b[3:0],c_in,s[4:0]);
  end
  
endmodule

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
