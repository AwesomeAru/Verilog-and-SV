////////////////////////////////////////////////////////////////////////////dut/////////////////////////////////////////////////////////////////////////////////////
module full_adder(a,b,c_in,s,c_out);
  input a,b,c_in;  // by default wire
  output reg s,c_out;
  
  always@(a or b or c_in)
    begin 
      case(a|b|c_in)
        3'b000: begin s=1'b0; c_out=1'b0; end
        3'b001: begin s=1'b1; c_out=1'b0; end
        3'b010: begin s=1'b1; c_out=1'b0; end
        3'b011: begin s=1'b0; c_out=1'b1; end
        3'b100: begin s=1'b1; c_out=1'b0; end
        3'b101: begin s=1'b0; c_out=1'b1; end
        3'b110: begin s=1'b0; c_out=1'b1; end
        3'b111: begin s=1'b1; c_out=1'b1; end
      endcase
    end
  
endmodule
       
//////////////////////////////////////////////////////////////////////test bench////////////////////////////////////////////////////////////////////////////////////////

// Code your testbench here
// or browse Examples
module full_adder_tb;
  reg a,b,c_in;
  wire s,c_out;
  
  full_adder full_adder_tb(a,b,c_in,s,c_out);
  
  initial
    begin
      {a,b,c_in}=0;
      {a,b,c_in}=1;
      {a,b,c_in}=2;
      {a,b,c_in}=3;
      {a,b,c_in}=4;
      {a,b,c_in}=5;
      {a,b,c_in}=6;
      {a,b,c_in}=7;
    end 
  
  initial begin
    $dumpfile("full_adder.vcd");
    $dumpvars(0,a,b,c_in,s,c_out);
  end
  
endmodule
